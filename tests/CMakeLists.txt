cmake_minimum_required(VERSION 3.10)
project(sokol-test)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)  # needed for UWP

# SOKOL_GLCORE33, SOKOL_GLES2, SOKOL_GLES3, SOKOL_D3D11, SOKOL_METAL, SOKOL_WGPU, SOKOL_DUMMY
option(SOKOL_BACKEND "Select 3D backend API" SOKOL_GLCORE33)
option(USE_ARC "Enable/disable ARC" OFF)

if (CMAKE_SYSTEM_NAME STREQUAL Emscripten)
    set(EMSCRIPTEN 1)
elseif (CMAKE_SYSTEM_NAME STREQUAL iOS)
    set(OSX_IOS 1)
elseif (CMAKE_SYSTEM_NAME STREQUAL Android)
    set(ANDROID 1)
elseif (CMAKE_SYSTEM_NAME STREQUAL Linux)
    set(LINUX 1)
elseif (CMAKE_SYSTEM_NAME STREQUAL Darwin)
    set(OSX_MACOS 1)
elseif (CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
    set(UWP 1)
elseif (CMAKE_SYSTEM_NAME STREQUAL Windows)
    set(WINDOWS 1)
else()
    message(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_NAME")
endif()

message(">> SOKOL_BACKEND: ${SOKOL_BACKEND}")
if (OSX_IOS OR OSX_MACOS)
    if (USE_ARC)
        message(">> ObjC ARC ENABLED")
    else()
        message(">> ObjC ARC DISABLED")
    endif()
endif()
message(">> BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(">> TOOLCHAIN: ${CMAKE_TOOLCHAIN_FILE}")

if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(c_flags /W4 /WX)
    set(cxx_flags /W4 /WX /EHsc)
else()
    set(c_flags -Wall -Wextra -Werror -Wsign-conversion)
    set(cxx_flags -Wall -Wextra -Werror -Wsign-conversion -fno-rtti -fno-exceptions)
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        set(c_flags ${c_flags} -Wno-missing-field-initializers)
        set(cxx_flags ${cxx_flags} -Wno-missing-field-initializers)
    endif()
endif()

if (EMSCRIPTEN)
    set(CMAKE_EXECUTABLE_SUFFIX ".html")
    set(link_flags -sNO_FILESYSTEM=1 -sASSERTIONS=0 -sMALLOC=emmalloc -sINITIAL_MEMORY=33554432 --closure=1)
elseif (OSX_IOS)
    set(exe_type MACOSX_BUNDLE)
    if (USE_ARC)
        set(c_flags ${c_flags} -fobjc-arc)
        set(cxx_flags ${cxx_flags} -fobjc-arc)
    endif()
    set(system_libs "-framework Foundation" "-framework UIKit" "-framework AudioToolbox" "-framework AVFoundation")
    if (SOKOL_BACKEND STREQUAL SOKOL_METAL)
        set(system_libs ${system_libs} "-framework Metal" "-framework MetalKit")
    else()
        set(system_libs ${system_libs} "-framework OpenGLES" "-framework GLKit")
    endif()
elseif (ANDROID)
    set(system_libs GLESv3 EGL OpenSLES log android)
    # FIXME
elseif (LINUX)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)
    set(system_libs X11 Xi Xcursor GL asound dl m Threads::Threads)
elseif (OSX_MACOS)
    set(exe_type MACOSX_BUNDLE)
    if (USE_ARC)
        set(c_flags ${c_flags} -fobjc-arc)
        set(cxx_flags ${cxx_flags} -fobjc-arc)
    endif()
    set(system_libs "-framework QuartzCore" "-framework Cocoa" "-framework AudioToolbox")
    if (SOKOL_BACKEND STREQUAL SOKOL_METAL)
        set(system_libs ${system_libs} "-framework MetalKit" "-framework Metal")
    else()
        set(system_libs ${system_libs} "-framework OpenGL")
    endif()
elseif (UWP)
    set(exe_type WIN32)
elseif (WINDOWS)
    set(exe_type WIN32)
endif()

macro(configure_common target)
    target_compile_definitions(${target} PRIVATE ${SOKOL_BACKEND})
    target_link_options(${target} PRIVATE ${link_flags})
    target_link_libraries(${target} PRIVATE ${system_libs})
    target_include_directories(${target} PRIVATE ../.. ../../util)
    target_include_directories(${target} PRIVATE ../ext)
endmacro()

macro(configure_osx_properties target)
    if (OSX_IOS)
        target_compile_definitions(${target} PRIVATE GLES_SILENCE_DEPRECATION)
    endif()
    set_target_properties(${target} PROPERTIES XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER "${target}")
    set_target_properties(${target} PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "${target}")
    set_target_properties(${target} PROPERTIES MACOSX_BUNDLE_PRODUCT_NAME "${target}")
    set_target_properties(${target} PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "${target}")
endmacro()

macro(configure_c target)
    configure_common(${target})
    target_compile_options(${target} PRIVATE ${c_flags})
    if (OSX_MACOS OR OSX_IOS)
        target_compile_options(${target} PRIVATE -x objective-c)
        configure_osx_properties(${target})
    endif()
endmacro()

macro(configure_cxx target)
    configure_common(${target})
    target_compile_options(${target} PRIVATE ${cxx_flags})
    if (OSX_MACOS OR OSX_IOS)
        target_compile_options(${target} PRIVATE -x objective-c++)
        configure_osx_properties(${target})
    endif()
endmacro()

#--- cimgui
add_library(cimgui
    ext/fips-cimgui/cimgui/cimgui.cpp
    ext/fips-cimgui/cimgui/imgui/imgui.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_demo.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_draw.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_tables.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_widgets.cpp)
target_include_directories(cimgui SYSTEM PUBLIC ext/fips-cimgui)

add_library(imgui
    ext/fips-cimgui/cimgui/imgui/imgui.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_demo.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_draw.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_tables.cpp
    ext/fips-cimgui/cimgui/imgui/imgui_widgets.cpp)
target_include_directories(imgui SYSTEM PUBLIC ext/fips-cimgui/cimgui/imgui)

add_subdirectory(compile)
add_subdirectory(functional)
